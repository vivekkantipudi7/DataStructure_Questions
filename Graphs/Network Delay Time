class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        unordered_map<int, vector<pair<int,int>>>mp;
        for(auto &it : times)
        {
            int u = it[0];
            int v = it[1];
            int w = it[2];

            mp[u].push_back({v, w});
        }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        vector<int>result(n+1, INT_MAX);

        result[k] = 0;
        pq.push({0, k});

        while(!pq.empty())
        {
            int d = pq.top().first;
            int node = pq.top().second;

            pq.pop();
                                                        // BASIC DIJKSTRA'S ALGORITHM
            for(auto &vec : mp[node])
            {
                int w = vec.second;
                int adjNode = vec.first;

                if(d+w < result[adjNode])
                {
                    result[adjNode] = d+w;
                    pq.push({d+w, adjNode});
                }
            }
        }
        
        int ans = INT_MIN;
        for(int i=1; i<=n; i++)
        {   
            if(result[i] == INT_MAX)
            {
                return -1;
            }
            ans = max(ans, result[i]);
        }
        return ans;


    }
};
