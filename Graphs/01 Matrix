class Solution {
public:
    vector<vector<int>>directions{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();

        vector<vector<int>>dist(m, vector<int>(n, -1));
        queue<pair<int, int>> q;
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(mat[i][j]==0)
                {
                    dist[i][j]=0;
                    q.push({i, j});
                }
            }
        }

        while(!q.empty())
        {
            int N = q.size();
            while(N--)
            {
                pair<int, int>P = q.front();
                q.pop();
                int x = P.first;
                int y = P.second;

                for(auto& dir : directions)
                {
                    int x_ = x+dir[0];
                    int y_ = y+dir[1];

                    if(x_>=0 && x_<m && y_>=0 && y_<n && dist[x_][y_] == -1)
                    {
                        dist[x_][y_] = dist[x][y] + 1;
                        q.push({x_, y_});
                    }
                }
            }
        }
        return dist;
    }
};
