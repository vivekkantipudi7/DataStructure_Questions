class Solution {
  public:
    /*  Function to implement Bellman Ford
     *   edges: vector of vectors which represents the graph
     *   src: source vertex
     *   V: number of vertices
     */
                     // dijkstra's nundi endhuku separate ante idhi negative weighted graph ki work avvudhi and negative cycle ni detect chesthadi

    vector<int> bellmanFord(int V, vector<vector<int>>& edges, int src) {
        // Code here
        vector<int> dist(V, 1e8);               
        
        dist[src] = 0;
        
        for(int i=1; i<=V-1; i++)                 // ikkada manam V-1 times edges ni relax chestham anamaata so that dist array lo manaki prathi vertex ki src 
        {                                         // nundi minimum distance osthadhi
           for(auto &edge : edges)
           {
               int u = edge[0];                   // ee for loop lodhi relaxation anamaata and dijkstra's ki similar ga untadhi                
               int v = edge[1];
               int w = edge[2];
               
               if(dist[u] != 1e8 && dist[u]+w < dist[v])
               {
                   dist[v] = dist[u]+w;
               }
           }
        }
        
        for(auto &edge : edges)       // ikkada inko time endhuku relaxation chesamante if manaki inko sari relaxation chesinappudu malli edhoka vertex ki distance
                                      // minimize avthe cycle detect ayinattu 
           {
               int u = edge[0];                
               int v = edge[1];
               int w = edge[2];
               
               if(dist[u] != 1e8 && dist[u]+w < dist[v])
               {
                   return {-1};
               }
           }
           
           return dist;
    }
};
