
---------------------------------------------------------------------With BFS---------------------------------------------------------------------------------------

class Solution {
public:
    vector<vector<int>>directions{{0,1}, {1,0}, {-1,0}, {0,-1}, {-1,-1}, {1,1}, {-1, 1}, {1, -1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        if(m==0 || n==0 || grid[0][0]!=0)
        {
            return -1;
        }

        auto isSafe = [&](int x, int y){
            return x>=0 && x<m && y>=0 && y<n;
        };

        queue<pair<int, int>>q;

        q.push({0, 0});
        grid[0][0]=1;
        int level = 0;

        while(!q.empty()){
            int N = q.size();

            while(N--)
            {
                pair<int, int> front = q.front();
                q.pop();

                int x = front.first;
                int y = front.second;

                if(x==m-1 && y==n-1)return level+1;

                for(auto& dir : directions)
                {
                    int x_ = x+dir[0];
                    int y_ = y+dir[1];

                    if(isSafe(x_, y_) && grid[x_][y_]==0)
                    {
                        q.push({x_, y_});
                        grid[x_][y_]=1;
                    }
                }
            }
            level++;
        }
        return -1;
    }
};

---------------------------------------------------------------------------------DIJKSTRA'S ALGO--------------------------------------------------------------------

class Solution {
public:
     typedef pair<int, pair<int,int>>P;   // dist, {x,y} coordinates strore cheyyadaniki idhi vaadaam
    vector<vector<int>>directions{{0,1}, {1,0}, {-1,0}, {0,-1}, {1,1}, {-1,-1}, {1,-1}, {-1, 1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();

        if(m==0 || n==0 || grid[0][0]!=0)
        {
            return -1;
        }
         auto isSafe = [&](int x, int y)               x_,y_ out of bound vellakunda ee lamda expression
         {
            return x>=0 && x<m && y>=0 && y<n;
         };
        
        priority_queue<P, vector<P>, greater<P>> pq;            // priority_queue lo pair store chestham malli ah pair lo int, pair untadhi dheenni paina define chesam
        vector<vector<int>>result(m, vector<int>(n, INT_MAX));  // 2d result array
        pq.push({0, {0,0}});
        result[0][0]=0;

        while(!pq.empty())
        {
            int d = pq.top().first;
            pair<int, int>node = pq.top().second;
            int x = node.first;
            int y = node.second;
            pq.pop();
            
            for(auto &dir : directions)
            {
                int x_ = x+dir[0];
                int y_ = y+dir[1];
                int dist = 1;
                if(isSafe(x_, y_) && grid[x_][y_] == 0 && d+dist< result[x_][y_])
                {
                   pq.push({d+dist, {x_, y_}});
                   result[x_][y_] = d+dist;
                }
            }
            
        }
        return (result[m-1][n-1] == INT_MAX) ? -1 : (result[m-1][n-1]+1);
    }
};
