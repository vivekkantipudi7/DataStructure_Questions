class Solution {
public:
    vector<int> topo(unordered_map<int, vector<int>>& mp, int numCourses)
    {
        vector<int> indegree(numCourses, 0);
        int count =0;
        for(int u=0; u<numCourses; u++)
        {
            for(auto &v : mp[u])
            {
                indegree[v]++;
            }
        }

        queue<int>q;
        vector<int>result;
        for(int i=0; i<indegree.size(); i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
                count++;
                result.push_back(i);
            }
        }

        while(!q.empty())
        {
            int u = q.front();
            q.pop();

            for(auto &v : mp[u])
            {
                indegree[v]--;

                if(indegree[v]==0)
                {
                    q.push(v);
                    count++;
                    result.push_back(v);
                }
            }
        }
        if(numCourses == count)return result;
        return {};
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        unordered_map<int, vector<int>>mp;

        for(auto &it : prerequisites)
        {
            int u = it[1];
            int v = it[0];

            mp[u].push_back(v);
        }

        return topo(mp, numCourses);

    }
};
