class Solution {
public:
    bool topo(unordered_map<int, vector<int>>& mp, vector<int>& indegree)
    {   int count = 0;
        queue<int>q;
        for(int i=0; i<indegree.size(); i++)
        {
            if(indegree[i] == 0)
            {
                q.push(i);
                count++;
            }
        }

        while(!q.empty())
        {
            int u = q.front();
            q.pop();

            for(auto &v : mp[u])
            {
                indegree[v]--;

                if(indegree[v]==0)
                {
                    q.push(v);
                    count++;
                }
            }
        }
        if(count == indegree.size())return true;

        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<int> indegree(numCourses, 0);

        unordered_map<int, vector<int>> mp;

        for(auto &it : prerequisites)
        {
            int a = it[0];
            int b = it[1];

            mp[b].push_back(a);

            indegree[a]++;
        }

        return topo(mp, indegree);
    }
};
