class Solution {
public:
     ListNode* findMiddle(ListNode* head) {

        ListNode* slow = head;
        ListNode* fast = head->next->next;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            slow= slow->next;
            fast=fast->next->next;
        }
        
        return slow;
    }
    ListNode* mergeTwoLL(ListNode* head1, ListNode* head2) {
        // code here
        ListNode* temp1 = head1;
        ListNode* temp2 = head2;
        
        ListNode* dummy = new ListNode(-1);
        ListNode*temp = dummy;
        
        while(temp1 && temp2)
        {
            if(temp1->val <= temp2->val)
            {
                temp->next = temp1;
                temp = temp1;
                temp1 =temp1->next;
            }
            else
            {
                
                temp->next  = temp2;
                temp = temp2;
                temp2=temp2->next;
            }
        }
        while(temp1)
        {
            temp->next = temp1;
            temp = temp1;
            temp1 = temp1->next;
        }
        while(temp2)
        {
            temp->next = temp2;
            temp = temp2;
            temp2 = temp2->next;
        }
        
      
        temp->next = NULL;
        return dummy->next;
    }
    ListNode* sortList(ListNode* head) {
       if(head == NULL || head->next == NULL)return head;

       ListNode* middle = findMiddle(head);
       ListNode* right = middle->next;
       middle->next = nullptr;
       ListNode* left = head;

       left = sortList (head);
       right = sortList(right);
       return mergeTwoLL(left, right); 
    }
};
